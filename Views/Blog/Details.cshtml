@model SimpleBlogMVC.Models.BlogPost
@using Microsoft.AspNetCore.Identity
@using SimpleBlogMVC.Extensions
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = Model.Title;
    var currentUser = await UserManager.GetUserAsync(User);
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h1 class="mb-3">@Model.Title</h1>
            <div class="text-muted mb-3">
                <span>By @Model.Username</span>
                <span class="mx-2">|</span>
                <span>@Model.CreatedAt.ToString("MMMM dd, yyyy")</span>
                <span class="mx-2">|</span>
                <span>@Model.Views view@(Model.Views != 1 ? "s" : "")</span>
            </div>
            @if (!string.IsNullOrEmpty(Model.Tags))
            {
                <div class="mb-3">
                    @foreach (var tag in Model.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                    {
                        <span class="badge bg-secondary me-1">@tag.Trim()</span>
                    }
                </div>
            }
            <div class="blog-content mb-4">
                @Html.Raw(Model.Content)
            </div>
            @if (User.Identity.Name == Model.Username)
            {
                <div class="mb-3">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary me-2">Edit</a>
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Delete</a>
                </div>
            }

            <!-- Comments Section -->
            <div class="comments-section mt-5">
                <h3>Comments (@(Model.Comments?.Count ?? 0))</h3>
                @if (User.Identity.IsAuthenticated)
                {
                    <form asp-action="AddComment" method="post" class="mb-4">
                        <input type="hidden" name="blogPostId" value="@Model.Id" />
                        <div class="form-group">
                            <textarea name="content" class="form-control" rows="3" placeholder="Add a comment..." required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary mt-2">Post Comment</button>
                    </form>
                }
                else
                {
                    <p>Please <a asp-controller="Account" asp-action="Login">log in</a> to comment.</p>
                }

                @if (Model.Comments != null && Model.Comments.Any())
                {
                    <div class="mb-3">
                        <button class="btn btn-outline-secondary" id="toggleMyComments">Show My Comments</button>
                    </div>

                    foreach (var comment in Model.Comments.Where(c => !c.IsDeleted && c.ParentCommentId == null).OrderByDescending(c => c.IsFavorite).ThenByDescending(c => c.UpvoteCount).ThenByDescending(c => c.CreatedAt))
                    {
                        var isAuthorComment = comment.User.UserName == Model.Username;
                        var isCurrentUserComment = currentUser?.Id == comment.UserId;

                        <div class="comment mb-3 @(comment.IsFavorite ? "border-primary" : "") @(isAuthorComment ? "author-comment" : "") @(isCurrentUserComment ? "my-comment" : "")" id="comment-@comment.Id">
                            <div class="comment-header d-flex justify-content-between align-items-center">
                                <h5>
                                    @comment.User.UserName
                                    @if (isAuthorComment)
                                    {
                                        <span class="badge bg-info ms-2">Author</span>
                                    }
                                </h5>
                                <small class="text-muted">@((DateTime.UtcNow - comment.CreatedAt).ToPrettyString())</small>
                            </div>
                            <p>@comment.Content</p>
                            @if (comment.UpdatedAt.HasValue)
                            {
                                <small class="text-muted">Edited @((DateTime.UtcNow - comment.UpdatedAt.Value).ToPrettyString()) ago</small>
                            }
                            <div class="comment-actions mt-2">
                                <form asp-action="ToggleUpvote" method="post" class="d-inline">
                                    <input type="hidden" name="id" value="@comment.Id" />
                                    <button type="submit" class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-thumbs-up"></i>
                                        <span class="upvote-count">@comment.UpvoteCount</span>
                                    </button>
                                </form>
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <button class="btn btn-sm btn-outline-secondary reply-btn" data-comment-id="@comment.Id">Reply</button>
                                }
                                @if (isCurrentUserComment || User.Identity.Name == Model.Username)
                                {
                                    <button class="btn btn-sm btn-outline-warning edit-comment-btn" data-comment-id="@comment.Id">Edit</button>
                                    <form asp-action="DeleteComment" method="post" class="d-inline">
                                        <input type="hidden" name="id" value="@comment.Id" />
                                        <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this comment?')">Delete</button>
                                    </form>
                                }
                                @if (User.Identity.Name == Model.Username)
                                {
                                    <form asp-action="FavoriteComment" method="post" class="d-inline">
                                        <input type="hidden" name="id" value="@comment.Id" />
                                        <button type="submit" class="btn btn-sm @(comment.IsFavorite ? "btn-primary" : "btn-outline-primary")">
                                            @(comment.IsFavorite ? "Unfavorite" : "Favorite")
                                        </button>
                                    </form>
                                }
                            </div>

                            <!-- Nested replies -->
                            @if (comment.Replies != null && comment.Replies.Any())
                            {
                                foreach (var reply in comment.Replies.Where(r => !r.IsDeleted).OrderBy(r => r.CreatedAt))
                                {
                                    var isAuthorReply = reply.User.UserName == Model.Username;
                                    var isCurrentUserReply = currentUser?.Id == reply.UserId;

                                    <div class="reply mt-3 ms-4 @(isAuthorReply ? "author-comment" : "") @(isCurrentUserReply ? "my-comment" : "")" id="comment-@reply.Id">
                                        <div class="reply-header d-flex justify-content-between align-items-center">
                                            <h6>
                                                @reply.User.UserName
                                                @if (isAuthorReply)
                                                {
                                                    <span class="badge bg-info ms-2">Author</span>
                                                }
                                            </h6>
                                            <small class="text-muted">@((DateTime.UtcNow - reply.CreatedAt).ToPrettyString())</small>
                                        </div>
                                        <p>@reply.Content</p>
                                        @if (reply.UpdatedAt.HasValue)
                                        {
                                            <small class="text-muted">Edited @((DateTime.UtcNow - reply.UpdatedAt.Value).ToPrettyString()) ago</small>
                                        }
                                        <div class="reply-actions mt-2">
                                            <form asp-action="ToggleUpvote" method="post" class="d-inline">
                                                <input type="hidden" name="id" value="@reply.Id" />
                                                <button type="submit" class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-thumbs-up"></i>
                                                    <span class="upvote-count">@reply.UpvoteCount</span>
                                                </button>
                                            </form>
                                            @if (isCurrentUserReply || User.Identity.Name == Model.Username)
                                            {
                                                <button class="btn btn-sm btn-outline-warning edit-comment-btn" data-comment-id="@reply.Id">Edit</button>
                                                <form asp-action="DeleteComment" method="post" class="d-inline">
                                                    <input type="hidden" name="id" value="@reply.Id" />
                                                    <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this reply?')">Delete</button>
                                                </form>
                                            }
                                        </div>
                                    </div>
                                }
                            }

                            <!-- Reply form (hidden by default) -->
                            <div class="reply-form mt-3 d-none" id="reply-form-@comment.Id">
                                <form asp-action="AddComment" method="post">
                                    <input type="hidden" name="blogPostId" value="@Model.Id" />
                                    <input type="hidden" name="parentCommentId" value="@comment.Id" />
                                    <div class="form-group">
                                        <textarea name="content" class="form-control" rows="2" placeholder="Write a reply..." required></textarea>
                                    </div>
                                    <button type="submit" class="btn btn-sm btn-primary mt-2">Post Reply</button>
                                </form>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No comments yet. Be the first to comment!</p>
                }
            </div>

            <a asp-action="Index" class="btn btn-secondary mt-3">Back to List</a>
        </div>

        @section Scripts {
            <script>
                $(document).ready(function () {
                    // Toggle reply form
                    $('.reply-btn').click(function () {
                        var commentId = $(this).data('comment-id');
                        $('#reply-form-' + commentId).toggleClass('d-none');
                    });

                    // Edit comment
                    $('.edit-comment-btn').click(function () {
                        var commentId = $(this).data('comment-id');
                        var commentElement = $('#comment-' + commentId);
                        var commentContent = commentElement.find('p').text();
                        var editForm = `
                                    <form asp-action="EditComment" method="post">
                                        <input type="hidden" name="id" value="${commentId}" />
                                        <div class="form-group">
                                            <textarea name="content" class="form-control" rows="3" required>${commentContent}</textarea>
                                        </div>
                                        <button type="submit" class="btn btn-primary mt-2">Save Changes</button>
                                        <button type="button" class="btn btn-secondary mt-2 cancel-edit-btn">Cancel</button>
                                    </form>
                                `;
                        commentElement.find('p').replaceWith(editForm);
                        $(this).hide();
                    });

                    // Cancel edit
                    $(document).on('click', '.cancel-edit-btn', function () {
                        var form = $(this).closest('form');
                        var commentId = form.find('input[name="id"]').val();
                        var commentContent = form.find('textarea[name="content"]').val();
                        form.replaceWith('<p>' + commentContent + '</p>');
                        $('#comment-' + commentId).find('.edit-comment-btn').show();
                    });

                        // Toggle my comments
                            $('#toggleMyComments').click(function() {
                                $('.comment').toggle();
                                $('.my-comment').toggle();
                                $(this).text(function(i, text) {
                                    return text === "Show My Comments" ? "Show All Comments" : "Show My Comments";
                                });
                            });
                        });
            </script>
        }

        @section Styles {
            <style>
                .blog-content img {
                    max-width: 100%;
                    height: auto;
                }

                .comment, .reply {
                    border: 1px solid #2d2d2d;
                    border-radius: 0.25rem;
                    padding: 1rem;
                    margin-bottom: 1rem;
                    background-color: #1e1e1e;
                }

                .comment-header, .reply-header {
                    margin-bottom: 0.5rem;
                }

                .comment-actions, .reply-actions {
                    margin-top: 0.5rem;
                }

                .author-comment {
                    border-left: 3px solid #bb86fc;
                }

                .my-comment {
                    background-color: #2d2d2d;
                }

                .comment .badge, .reply .badge {
                    background-color: #bb86fc;
                    color: #000;
                }

                .upvote-count {
                    color: #e0e0e0;
                }

                .btn-outline-primary {
                    color: #bb86fc;
                    border-color: #bb86fc;
                }

                    .btn-outline-primary:hover {
                        background-color: #bb86fc;
                        color: #000;
                    }

                .btn-outline-secondary {
                    color: #03dac6;
                    border-color: #03dac6;
                }

                    .btn-outline-secondary:hover {
                        background-color: #03dac6;
                        color: #000;
                    }

                .btn-outline-warning {
                    color: #ffb86c;
                    border-color: #ffb86c;
                }

                    .btn-outline-warning:hover {
                        background-color: #ffb86c;
                        color: #000;
                    }

                .btn-outline-danger {
                    color: #ff5555;
                    border-color: #ff5555;
                }

                    .btn-outline-danger:hover {
                        background-color: #ff5555;
                        color: #000;
                    }
            </style>
        }
